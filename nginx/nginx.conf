events {}

http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout custom;
    error_log /dev/stderr warn;

    # Allow 10 requests per second per IP, burst up to 20
    limit_req_zone $binary_remote_addr zone=limit_per_ip_a:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=limit_per_ip_b:10m rate=20r/s;

    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=STATIC:10m max_size=100m inactive=60s use_temp_path=off;

    upstream service_a {
        server servicea:80 max_fails=3 fail_timeout=5s;
    }

    upstream service_b {
        server serviceb:80 max_fails=3 fail_timeout=5s;
    }

    server {
        listen 80;
        return 301 https://$host:443$request_uri;
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate     /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;

        access_log /dev/stdout custom;

        error_page 503 /rate-limit-error.json;
        
        location = /rate-limit-error.json {
            default_type application/json;
            return 503 '{"error":"Too many requests","status":503}';
        }

        location /a/ {
            limit_req zone=limit_per_ip_a burst=10 nodelay;
        
            error_page 503 /rate-limit-error.json;

            proxy_cache STATIC;
            proxy_cache_valid 200 5s;   # cache 200 OK responses for 1 second
            proxy_cache_methods GET HEAD;
            add_header X-Cache-Status $upstream_cache_status;


            proxy_pass http://service_a/;
        }

        location /b/ {
            limit_req zone=limit_per_ip_b burst=30;

            error_page 503 /rate-limit-error.json;

            proxy_cache STATIC;
            proxy_cache_valid 200 1s;
            proxy_cache_methods GET HEAD;
            add_header X-Cache-Status $upstream_cache_status;

            proxy_pass http://service_b/;
        }

        # ðŸ©º Health Check Endpoints
        location /health-a {
            proxy_pass http://service_a/health;
        }

        location /health-b {
            proxy_pass http://service_b/health;
        }
    }
}
